#!/bin/bash
#
currentArchitecture=$(dpkg --print-architecture)

# The priorities that are required to be installed.
requiredPriorities="$requiredPriorities required"
requiredPriorities="$requiredPriorities important"
requiredPriorities="$requiredPriorities standard"
#requiredPriorities="$requiredPriorities optional"
#requiredPriorities="$requiredPriorities extra"

# The packages that are required to be installed.
# The Base system
requiredPackages="$requiredPackages grub-pc"
requiredPackages="$requiredPackages linux-image-${currentArchitecture}"
requiredPackages="$requiredPackages firmware-linux"
requiredPackages="$requiredPackages lvm2"

# Tasks
requiredPackages="$requiredPackages task-english"
requiredPackages="$requiredPackages task-ssh-server"

# Other packages
requiredPackages="$requiredPackages apt-transport-https ca-certificates curl gnupg2 software-properties-common"
requiredPackages="$requiredPackages aptitude"
requiredPackages="$requiredPackages build-essential"
requiredPackages="$requiredPackages clamav clamav-daemon"
requiredPackages="$requiredPackages cntlm"
requiredPackages="$requiredPackages connect-proxy"
requiredPackages="$requiredPackages docker-ce"
requiredPackages="$requiredPackages git git-flow gitk"
requiredPackages="$requiredPackages htop"
requiredPackages="$requiredPackages iptables"
requiredPackages="$requiredPackages jq"
requiredPackages="$requiredPackages pciutils"
requiredPackages="$requiredPackages popularity-contest"
requiredPackages="$requiredPackages sudo"
requiredPackages="$requiredPackages unattended-upgrades"

# Which packages are already installed?
autoInstalledPackages=$(apt-mark showauto)
manualInstalledPackages=$(apt-mark showmanual)

# All available packages with descriptions.
apt-cache dumpavail | \
awk \
	-v currentArchitecture="$currentArchitecture" \
	-v requiredPrioritiesString="$requiredPriorities" \
	-v requiredPackagesString="$requiredPackages" \
	-v autoInstalledPackagesString="$autoInstalledPackages" \
	-v manualInstalledPackagesString="$manualInstalledPackages" \
	-- '
	function stringToArray(s, a,
			a1, i, v) {
		split(s, a1, "[ \t\r\n]+")
		for (i in a1) {
			v = a1[i]
			if (v != "") {
				a[v] = "true"
			}
		}
	}
	BEGIN {
		stringToArray(requiredPrioritiesString, requiredPriorities)
		stringToArray(requiredPackagesString, requiredPackages)
		stringToArray(autoInstalledPackagesString, autoInstalledPackages)
		stringToArray(manualInstalledPackagesString, manualInstalledPackages)
	}
	$1 == "Package:" { Package = $2 }
	$1 == "Architecture:" { Architecture = $2 }
	$1 == "Essential:" { Essential = $2 }
	$1 == "Priority:" { Priority = $2 }
	$0 == "" && Package != "" {
		if (Architecture == currentArchitecture || Architecture == "all" || Architecture == "") {
			packageName = Package
		} else {
			packageName = Package ":" Architecture
		}
		isRequired = false
		isRequired = isRequired || (Essential != "" && Package == packageName)
		isRequired = isRequired || (Priority in requiredPriorities && Package == packageName)
		isRequired = isRequired || (packageName in requiredPackages)
		isRequired = isRequired && ! (packageName "-" in requiredPackages)
		if (isRequired) {
			if (packageName in autoInstalledPackages) {
				toBeMarkedManual[packageName] = "true"
			} else if (!(packageName in manualInstalledPackages)) {
				toBeInstalled[packageName] = "true"
			}
		} else {
			if (packageName in manualInstalledPackages) {
				toBeMarkedAuto[packageName] = "true"
			}
		}
	}
	$0 == "" {
		Package = ""
		Architecture = ""
		Essential = ""
		Priority = ""
	}
	END {
		for (package in toBeInstalled) { print package "+" }
		for (package in toBeMarkedAuto) { print package "&M" }
		for (package in toBeMarkedManual) { print package "&m" }
	}
' | \
xargs --no-run-if-empty --verbose aptitude --schedule-only install
